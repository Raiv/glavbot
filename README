Описание
Создать консольное приложение на C для чтения H.264 видеопотока с
модуля камеры Rpi через API MMAL, и передачи его по TCP сокету на
сервер. Значения параметров видеопотока (см ниже) должны при этом на
лету определяться (и устанавливаться), исходя из вычисленной общей
латентности кадра (считается, как сумма времени захвата на сенсоре и
времени передачи) с целью поддерживать латентность изображения ниже
заданного уровня в плохих сетевых условиях.
Время передачи кадров считается, как усредненная за N крайних TCP
пакетов разность TSecr и TSval.
Время захвата считается путем опроса системного времени GPU в момент
прихода прерывания и считывания таймстемпов полученного с сенсора
кадра.

Предлагаемые этапы
* Возможность установки параметров MMAL_PARAMETER_VIDEO_BIT_RATE,
MMAL_PARAMETER_SHUTTER_SPEED, MMAL_PARAMETER_VIDEO_FRAME_RATE,
MMAL_PARAMETER_INTRAPERIOD,
MMAL_PARAMETER_VIDEO_ENCODE_H264_MB_INTRA_MODE на лету (без рестарта
камеры) как с помощью аргументов командной строки, так и через stdin.
Запись выхлопа камеры в файл с указанным в argv именем/путем.
* Передача видеопотока на удаленный сервер по TCP/IP (это требование
проекта; на данный момент UDP решения не рассматриваются). Вычисление
полного запаздывания кадра (см выше), печать полного запаздывания в
stdout на клиенте.
* Поддержка опции командной строки для установки целевого FPS и
целевого общего запаздывания. Если измеренная общая латентность по
последним N кадрам (N определяется из частоты I-кадров) выше некотого
верхнего порога, установить битрейт на камере в величину, при которой
латентность будет ниже этого порога. Если общая латентность ниже, чем
некий нижний порог, попытаться нарастить битрейт, пока латентность не
достигнет средней величины между двумя порогами. Если длина буфера
кадров больше, чем максимальное значение, определяемое из верхнего
порога и FPS, сбросить все кадры в исходящем буфере.
* Отладка до промышленного качества. Требования к стабильности: 30
минут без фаталити в условиях переменной освещенности, утечка не более
1Мб ОЗУ. Тестирование будет проводиться с помощью программы tc,
эмулирующей различные сетевые состояния. Программа должна вывести
битрейт на новое стабильное значение, сохраняющее запаздывание, не
более, чем через 1 сек на 30фпс.

Примечания
Все исключительные права передаются заказчику
Можно использовать RaspiVid и другие готовые программы, т.к. софт в
дальнейшем будет выложен под GPLv3.
Есть некий грубый прототип, которым можно воспользоваться для
ускорения работы (впрочем, им можно и пренебречь, т.к. он довольно
плох).
Код будет коммититься в github репозиторий заказчика
В случае успешного и быстрого завершения задачи возможны бонусные
таски за доп. $$.